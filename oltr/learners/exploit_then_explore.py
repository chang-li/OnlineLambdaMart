import numpy as np

from oltr.utils.metric import ndcg_at_k
from oltr.utils.queries import Queries, find_constant_features
from oltr.learners.online_learner import OnlineLTR


class ExploreThenExploitOLTR(OnlineLTR):

  def __init__(self, train_qset, num_explore_iterations,
               valid_qset=None, test_qset=None, seed=42):
    super(ExploreThenExploitOLTR,
          self).__init__(train_qset=train_qset, valid_qset=valid_qset,
                         test_qset=test_qset, seed=seed)
    self.num_explore_iterations = num_explore_iterations
    self.iteration = 0

  def get_labels_and_rankings(self, ranker, num_queries):
    if self.iteration < self.num_explore_iterations:
      ranker_ = None
    else:
      ranker_ = ranker
    return super(ExploreThenExploitOLTR,
                 self).get_labels_and_rankings(ranker_, num_queries)

  def update_ranker(self, ranker_params, fit_params):
    self.iteration += 1
    return super(ExploreThenExploitOLTR,
                 self).update_ranker(ranker_params, fit_params)